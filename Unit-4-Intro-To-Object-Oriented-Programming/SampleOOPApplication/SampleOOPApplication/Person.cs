namespace SampleOOPApplication;

/*****************************
 * This class will represent a Person
 *
 * A class has data (attributes) and methods (behaviors)
 * 
 * Attributes: Name
 *             Height
 *             Weight
 *             Age
 *             Gender
 *             EyeColor
 *             HairColor
 ******************************************************************/
// a class is usually public so others can use it
public class Person
{
    /*************************************************
     * Instance variable identify attributes unique to an object of a class
     *
     * Usually private to protect from outside access
     *******************************************************/

    private string _name; // C# coding convention is private variables start with _
    private double _heightInInches; // C# coding convention is private variables start with _
    private double _weightInPounds; // C# coding convention is private variables start with _
    private int _age; // C# coding convention is private variables start with _
    private string _gender; // C# coding convention is private variables start with _


    /***********************************************
     * Properties to allow access to data
     *
     * 3 ways to define getters and setters shown
     */

    // Automatically implemented property 
    // Convenient and common - no special processing you want for getter/setter
    // Automatically defines a private variable for you (you don't need to declare it)
    // Use the Property Name to access the data if you set up a private variable on your own
    public string Name { get; set; } // Use property to assign values

    // full property syntax or block-bodied syntax
    // Usually/should have a private variable defined that it represents
    // you provide the processing for getter and setter
    // flexible allows for custom logic in getter/setter
    // Fairly common 
    public double HeightInInches
    {

        get { return _heightInInches; }

        set { _heightInInches = value; } // value is keyword that represents the value passed to setter
    }

    // Expression-bodied property
    // More concise (less code, can be confusing)
public double WeightInPounds
    {
        get => _weightInPounds;
        set => _weightInPounds = value;
    }

    public int Age
    {
        get => _age;
        set => _age = value;
    }

    public string Gender
    {
        get => _gender;
        // For objects, you can have C# throw an exception if null 
        // ?? means the string value is null
        // ?? throws is optional
        set => _gender = value ?? throw new ArgumentNullException(nameof(value));
    }
    
/****************************************************
 * Constructors initialize objects of the class
 *
 * Not use of property names to initialize 
 *****************************************************/
    public Person(string name, double heightInInches, double weightInPounds, int age, string gender)
    {
        _name = name;
        _heightInInches = heightInInches;
        _weightInPounds = weightInPounds;
        _age = age;
        _gender = gender;
    }
    /*************************************************
     * Method overrides for default behaviors we don't want
     *
     * ToString()
     * Equals()
     * GetHashCode()
     * 
     * DO NOT ACCEPT THE CODE GENERATED BY AN IDE FOR THESE WITHOUT LOOKING AT IT
     **************************************************/
    public override bool Equals(object? obj)
    {
        //return base.Equals(obj); // Performs default base behavior which compares the locations
        
        // Write what makes two Person objects equal
        // Same name, Height, Weight, Gender
        //
        Person otherPerson = (Person)obj; // We get a generic object as a parameter
                                          // so we have to create an object of this class from it
        if (this.Name == otherPerson.Name
            &&  this.HeightInInches == otherPerson.HeightInInches
            &&  this.WeightInPounds == otherPerson.WeightInPounds
            &&  this.Age == otherPerson.Age
            &&  this.Gender == otherPerson.Gender);
        {
            return true;
        }
        return false;
    }
    // Override the default GetHashCode method: public int GetHashCode()
    // (because IDE generated usually doesn't do what you want)
    //
    // GetHashCode() should return a unique value generated by the member data
    //
    public override int GetHashCode()
    {
        // A HashCode may be generated determining the sum of:
        //
        //    numeric-values * prime-number
        //    (some prime number: 11, 13, 17, 19, 23, 29, 31, 37, 41)
        //    string, bool, objects - Use system GetHashCode method
        return base.GetHashCode();
    }

    public override string ToString()
    {
        return $"{Name} {HeightInInches} inches {Gender} {Age} years old";
    }
} // End of Person class